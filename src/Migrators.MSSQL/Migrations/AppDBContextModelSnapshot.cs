// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrators.MSSQL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Artwork", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.Property<Guid>("BlockingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockingId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("Block", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtworkId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Bookmark", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("ParentCategory")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategory");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("CategoryArtworkDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ServiceId");

                    b.ToTable("CategoryServiceDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId_1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId_2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId_1");

                    b.HasIndex("AccountId_2");

                    b.ToTable("ChatBox", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReplyId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotifyType")
                        .HasColumnType("int");

                    b.Property<Guid>("SentToAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SentToAccount");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Proposal", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AssetLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalAsset", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Timeline")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Vote")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId")
                        .IsUnique();

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CoverLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("NumberOfConcept")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NumberOfRevision")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ServiceDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("TagDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetId");

                    b.HasIndex("ProposalId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ATid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("RTid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ATid")
                        .IsUnique();

                    b.HasIndex("RTid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("WithdrawInformation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("WithdrawMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletHistory", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Artworks")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Assets")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Blocked")
                        .WithMany("Blocked")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Blocking")
                        .WithMany("Blocking")
                        .HasForeignKey("BlockingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Collection", "Collection")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account_1")
                        .WithMany("ChatBoxes_1")
                        .HasForeignKey("AccountId_1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account_2")
                        .WithMany("ChatBoxes_2")
                        .HasForeignKey("AccountId_2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account_1");

                    b.Navigation("Account_2");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Collections")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Comments")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Comment", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId");

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Followings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Images")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Likes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Likes")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Messages")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");

                    b.Navigation("ChatBox");
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("SentToAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Proposals")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Proposals")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Proposals")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("ProposalAssets")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "AccountReport")
                        .WithMany("Reports")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("AccountReport");
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Requests")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entitites.Review", "ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Services")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("TagDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Tag", "Tag")
                        .WithMany("TagDetails")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Asset", "Asset")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AssetId");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Account");

                    b.Navigation("Asset");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entitites.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Wallet", "Wallet")
                        .WithMany("WalletHistories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");

                    b.Navigation("ChatBoxes_1");

                    b.Navigation("ChatBoxes_2");

                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Likes");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Proposals");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("TransactionHistories");

                    b.Navigation("UserTokens");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Bookmarks");

                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("ServiceDetails");

                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Navigation("ProposalAssets");

                    b.Navigation("Review");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.Navigation("WalletHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
