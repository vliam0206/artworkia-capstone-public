// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrators.MSSQL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240322053248_UpdateCommentData")]
    partial class UpdateCommentData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Avatar = "https://i.pinimg.com/564x/ed/de/aa/eddeaaf250c19489e25bd0a2dd3e7756.jpg",
                            Bio = "Tôi là người dùng mặc định",
                            Birthdate = new DateTime(2000, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 14, 12, 37, 42, 345, DateTimeKind.Local),
                            Email = "user@example.com",
                            Fullname = "Người dùng mặc định",
                            Password = "/Yvo/zNSPcJB+6Roi0BD6gR/tx9tPXSqrslB+3Zy0rwOC2lA",
                            Role = 2,
                            Username = "user"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Avatar = "https://i.pinimg.com/564x/be/85/2f/be852fd4ad1cb76b83ce962f618895bd.jpg",
                            Bio = "Tôi là Trúc Lam Võ, tôi là một nghệ sĩ đầy tài năng",
                            Birthdate = new DateTime(2002, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 15, 17, 15, 47, 890, DateTimeKind.Local),
                            Email = "lamlam@example.com",
                            Fullname = "Trúc Lam Võ",
                            Password = "P9i8PUWQ4DnT6Dnstg7HEXTlnFUDoZFTNJopEJ4UxxoK3zRn",
                            Role = 2,
                            Username = "lamlam"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Avatar = "https://i.pinimg.com/564x/14/b0/3b/14b03bdcab41f458dd15c9f5669cef2d.jpg",
                            Bio = "Tôi là Đặng Hoàng Anh, tôi là một nghệ sĩ đầy tài năng",
                            Birthdate = new DateTime(2002, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 21, 19, 20, 47, 890, DateTimeKind.Local),
                            Email = "hoanganh@example.com",
                            Fullname = "Đặng Hoàng Anh",
                            Password = "RZX95v+qA/O+EKXLkilrMbLW+cKQ7jekrOE9uwWE4fSupbQM",
                            Role = 2,
                            Username = "hoanganh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Avatar = "https://i.pinimg.com/564x/6c/a3/4b/6ca34beddfbd279418c915d2258d698b.jpg",
                            Bio = "Tôi là Nguyễn Trung Thông, tôi là một nghệ sĩ đầy tài năng",
                            Birthdate = new DateTime(2002, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 27, 19, 23, 47, 890, DateTimeKind.Local),
                            Email = "thong@example.com",
                            Fullname = "Nguyễn Trung Thông",
                            Password = "BCpA8roVqTkU54PKIBXU4Iyl3YqyF5wYPagAXZ/1HYFEB9dh",
                            Role = 2,
                            Username = "thong"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Avatar = "https://i.pinimg.com/736x/81/3c/57/813c57fcb969d58fac1672594da05532.jpg",
                            Bio = "Tôi là Huỳnh Vạn Phú, tôi là một nghệ sĩ đầy tài năng",
                            Birthdate = new DateTime(2002, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 30, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "phu@example.com",
                            Fullname = "Huỳnh Vạn Phú",
                            Password = "44p9oaVq2ED8i7Q6vKIaS//ynDYqhnLcHcX/W7sDDIa1m3v/",
                            Role = 2,
                            Username = "phuhuynh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Avatar = "https://i.pinimg.com/564x/7d/cd/61/7dcd61988b0add83b5ba9a656512593e.jpg",
                            Bio = "Tôi là kiểm soát viên hệ thống",
                            Birthdate = new DateTime(2001, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 14, 12, 37, 42, 345, DateTimeKind.Local),
                            Email = "mod@example.com",
                            Fullname = "Kiểm soát viên",
                            Password = "/yI89eEokmyCtc8FQcA8Salpuc2Gnv6+xvWUi9jfF3D56K8l",
                            Role = 1,
                            Username = "mod"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Avatar = "https://i.pinimg.com/564x/0e/4b/7a/0e4b7aef4834bfc646775d8fd3705825.jpg",
                            Bio = "Tôi là quản trị viên hệ thống",
                            Birthdate = new DateTime(2000, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "admin@example.com",
                            Fullname = "Quản trị viên hệ thống",
                            Password = "tmb/sYLga1PDxUtRiIEU4YJtaG2HN58av/VA2S/8v19GLbSx",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Avatar = "https://i.pinimg.com/564x/79/ba/4f/79ba4f6c73168efb975a2d43cc4272a3.jpg",
                            Bio = "Tôi là một thiết kế UI/UX tài năng, đã có nhiều dự án thành công với các công ty lớn, cũng là người sáng lập một công ty thiết kế đồ họa.",
                            Birthdate = new DateTime(2002, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "nguyenhoang@example.com",
                            Fullname = "Nguyễn Hoàng",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "nguyenhoang"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Avatar = "https://i.pinimg.com/564x/79/ba/4f/79ba4f6c73168efb975a2d43cc4272a3.jpg",
                            Bio = "Tôi là một nhà thiết kế web có kinh nghiệm, đã tham gia vào nhiều dự án phức tạp và mang lại sự sáng tạo đặc biệt.",
                            Birthdate = new DateTime(2002, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "tranminh@example.com",
                            Fullname = "Trần Minh",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "tranminh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Avatar = "https://i.pinimg.com/564x/62/4a/2f/624a2fda3e0da8e55b4ea60b0949affa.jpg",
                            Bio = "Tôi là một thiết kế 2D và 3D, đã tạo ra nhiều tác phẩm ấn tượng trong lĩnh vực phim hoạt hình và trò chơi điện tử.",
                            Birthdate = new DateTime(2000, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "phamthanh@example.com",
                            Fullname = "Phạm Thanh",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "phamthanh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Avatar = "https://i.pinimg.com/564x/8f/52/88/8f5288392e58e7f69adecfdd1bb1d896.jpg",
                            Bio = "Tôi là một họa sĩ chuyên về tranh kỹ thuật số, đã có nhiều triển lãm cá nhân và tham gia vào dự án nghệ thuật trên toàn thế giới.",
                            Birthdate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "ngothanhtu@example.com",
                            Fullname = "Ngô Thanh Tú",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "ngothanhtu"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Avatar = "https://i.pinimg.com/564x/ad/c2/95/adc2953d7533371d1cdb95303d70babe.jpg",
                            Bio = "Tôi là một thiết kế đồ họa sáng tạo, đã tham gia vào nhiều dự án quảng cáo và branding cho các thương hiệu lớn.",
                            Birthdate = new DateTime(2002, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "truongthu@example.com",
                            Fullname = "Trương Thu",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "truongthu"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Avatar = "https://i.pinimg.com/564x/9c/28/19/9c2819e41426236d748392299cd20246.jpg",
                            Bio = "Tôi là một nhiếp ảnh gia có tên tuổi, đã chụp nhiều bức ảnh độc đáo về văn hóa và cảnh đẹp Việt Nam.",
                            Birthdate = new DateTime(2002, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "levan@example.com",
                            Fullname = "Lê Văn",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "levan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Avatar = "https://i.pinimg.com/564x/ae/ca/78/aeca78f2453767acdbd8398c4f310025.jpg",
                            Bio = "Tôi là một nhà thiết kế đồ họa sáng tạo, đã tham gia vào nhiều dự án quảng cáo, in ấn và branding.",
                            Birthdate = new DateTime(2002, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "nguyenminh@example.com",
                            Fullname = "Nguyễn Minh",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "nguyenminh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Avatar = "https://i.pinimg.com/564x/2a/1c/40/2a1c400fa2d814b78ed36fd21a5316f5.jpg",
                            Bio = "Tôi là một họa sĩ có gu thẩm mỹ độc đáo, tạo ra những tác phẩm nghệ thuật đa dạng và phong phú.",
                            Birthdate = new DateTime(2002, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 9, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "hoangtuan@example.com",
                            Fullname = "Hoàng Tuấn",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "hoangtuan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Avatar = "https://i.pinimg.com/564x/10/3a/ed/103aed482f200ba1af9a50a2392a83f0.jpg",
                            Bio = "Tôi là một thiết kế đồ họa trẻ tuổi nhưng tài năng, đã tham gia vào nhiều dự án sáng tạo và độc đáo.",
                            Birthdate = new DateTime(1999, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "buiduong@example.com",
                            Fullname = "Bùi Dương",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "buiduong"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Avatar = "https://i.pinimg.com/564x/17/f4/97/17f497af6f6b67bd9dbcb93c04dced89.jpg",
                            Bio = "Tôi là một họa sĩ chuyên về tranh nghệ thuật, tạo ra những tác phẩm tươi sáng và lôi cuốn.",
                            Birthdate = new DateTime(2003, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "phamha@example.com",
                            Fullname = "Phạm Hà",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "phamha"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Avatar = "https://i.pinimg.com/564x/ba/74/40/ba744092fe6e7222d44a5e89cf483d6d.jpg",
                            Bio = "Tôi là một thiết kế UI/UX đam mê và sáng tạo, đã tham gia vào nhiều dự án thành công trong lĩnh vực công nghệ.",
                            Birthdate = new DateTime(2002, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "doantrang@example.com",
                            Fullname = "Đoàn Trang",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "doantrang"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Avatar = "https://i.pinimg.com/564x/de/09/b1/de09b1839700e9988e605df833a5450a.jpg",
                            Bio = "Tôi là một nghệ sĩ 3D tài năng, đã tham gia vào việc tạo ra các mô hình 3D ấn tượng cho phim và trò chơi.",
                            Birthdate = new DateTime(2002, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "tranduc@example.com",
                            Fullname = "Trần Đức",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "tranduc"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Avatar = "https://i.pinimg.com/564x/1e/a0/59/1ea05967bf1e5e2054aaecd109a3c662.jpg",
                            Bio = "Tôi là một nhà thiết kế đồ họa có tầm nhìn sáng tạo, đã đạt được nhiều giải thưởng trong ngành.",
                            Birthdate = new DateTime(2003, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "nguyenhieu@example.com",
                            Fullname = "Nguyễn Hiếu",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "nguyenhieu"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Avatar = "https://i.pinimg.com/564x/7b/78/42/7b784268d117a6d57a8d9a83c7eaa977.jpg",
                            Bio = "Tôi là một họa sĩ trẻ có sức sáng tạo và tinh thần nghệ thuật cao, đã tham gia vào nhiều dự án nghệ thuật và thiết kế.",
                            Birthdate = new DateTime(2002, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "vuthao@example.com",
                            Fullname = "Vũ Thảo",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "vuthao"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Avatar = "https://i.pinimg.com/564x/7b/78/42/7b784268d117a6d57a8d9a83c7eaa977.jpg",
                            Bio = "Tôi là một nhà thiết kế đồ họa có kinh nghiệm, đã tham gia vào việc phát triển các ứng dụng di động và giao diện người dùng.",
                            Birthdate = new DateTime(2004, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "nguyentien@example.com",
                            Fullname = "Nguyễn Tiến",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "nguyentien"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Avatar = "https://i.pinimg.com/564x/f9/7f/c4/f97fc4762b0ca1c3ba76c3b2e6c5041c.jpg",
                            Bio = "Tôi là một họa sĩ nổi tiếng với phong cách nghệ thuật độc đáo và sáng tạo. Đã tham gia vào nhiều triển lãm nghệ thuật quốc tế và được biết đến với các tác phẩm nổi bật.",
                            Birthdate = new DateTime(2002, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "vudang@example.com",
                            Fullname = "Vũ Đăng",
                            Password = "A5tzNn90k1cgMCIWicwomDz/Wb1/BAWIDIVelEKhM6lHvuwh",
                            Role = 2,
                            Username = "vudang"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Artwork", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CommentCount = 6,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 2, 9, 37, 42, 345, DateTimeKind.Local),
                            Description = "Tuyển tập những bức vẽ về hoàng hôn",
                            IsAIGenerated = false,
                            LikeCount = 8,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.7WfKwqG.VAbgwQ87iaTU?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "00000000-0000-0000-0000-000000000001_t.jpg",
                            Title = "Hoàng hôn rực nắng",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 3, 22, 20, 45, 890, DateTimeKind.Local),
                            Description = "Khám phá sâu hơn về cảm xúc và tâm trạng trong cuộc sống",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.mMOt1xWJJCHsRoPJXtHQ?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000001_t.jpg",
                            Title = "Hành trình sâu cảm xúc",
                            ViewCount = 327
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 4, 20, 55, 30, 456, DateTimeKind.Local),
                            Description = "Minh họa những cuộc chiến tiêu biểu của thời đại",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.k0SSs9Qn3tHNvlcMdMrG?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "00000000-0000-0000-0000-000000000002_t.jpg",
                            Title = "Vẻ đẹp của lịch sử",
                            ViewCount = 638
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 5, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Tác phẩm thể hiện sự ảnh hưởng của quá khứ đối với hiện tại",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Oe0vi0jHSKaHn5DZ267N?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "00000000-0000-0000-0000-000000000004_t.jpg",
                            Title = "Dấu vết của quá khứ",
                            ViewCount = 23
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 6, 7, 30, 15, 567, DateTimeKind.Local),
                            Description = "Minh họa cho hành trình không ngừng của sự sáng tạo",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.LTaVFacabNQc22SAk1r1?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000005_t.jpg",
                            Title = "Hành trình của sự sáng tạo",
                            ViewCount = 779
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 7, 12, 40, 28, 901, DateTimeKind.Local),
                            Description = "Tượng trưng cho sự đồng hành và hỗ trợ của đối tác tâm lý",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.AoM9akz.gT4RMZ9R6DOh?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000006_t.jpg",
                            Title = "Sự đồng hành của đối tác tâm lý",
                            ViewCount = 245
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 9, 1, 30, 15, 567, DateTimeKind.Local),
                            Description = "Hình ảnh tượng trưng cho ánh sáng và năng lượng bên trong chúng ta",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG..gPcXaRan.FdnEjYCvT3?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000007_t.jpg",
                            Title = "Mặt trời bên trong",
                            ViewCount = 356
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 1, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Đây là tuyển tập tâm huyết của mình, nhớ like và comment để ủng hộ mình nha",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.yy76iMmgUCmXetlfQxqn?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "00000000-0000-0000-0000-000000000008_t.jpg",
                            Title = "Tuyển tập minh hoạ sách tâm lý",
                            ViewCount = 342
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 10, 4, 20, 10, 234, DateTimeKind.Local),
                            Description = "Minh họa cho tâm trạng lạc quan và hy vọng về tương lai",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Uz66_wn15hsKPirpv6Pb?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000009_t.jpg",
                            Title = "Sự lạc quan của tương lai",
                            ViewCount = 86
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 10, 20, 55, 30, 456, DateTimeKind.Local),
                            Description = "Tượng trưng cho nơi gặp gỡ và kết nối tâm hồn con người",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.78MNqZpoa6ReKmvZCHPI?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-00000000000a_t.jpg",
                            Title = "Nơi gặp gỡ tâm hồn",
                            ViewCount = 145
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 11, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Tượng trưng cho vũ trụ rộng lớn và không gian của tâm trí con người",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Iar__phrqaC3bhQLIHAZ?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "00000000-0000-0000-0000-00000000000b_t.jpg",
                            Title = "Vũ trụ tâm trí",
                            ViewCount = 65
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 11, 9, 37, 42, 345, DateTimeKind.Local),
                            Description = "Bức tranh thể hiện hành trình tìm kiếm và theo đuổi đam mê trong cuộc sống",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.MxQxUggA0RKmKdTjwAqw?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-00000000000c_t.jpg",
                            Title = "Hành trình tìm kiếm đam mê",
                            ViewCount = 234
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 13, 15, 40, 28, 901, DateTimeKind.Local),
                            Description = "Bộ sưu tập người máy - biểu tượng của tương lai.",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 1,
                            Thumbnail = "https://th.bing.com/th/id/OIG.D7FfBXsOQCjc28w68xZS?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-00000000000e_t.jpg",
                            Title = "Kỷ nguyên mới",
                            ViewCount = 123
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 11, 14, 15, 20, 45, 890, DateTimeKind.Local),
                            Description = "Cánh cụt cute",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.MC3PObbEmuJhfsPJ8biQ?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-00000000000f_t.jpg",
                            Title = "Tuyển tập ảnh cánh cụt cute",
                            ViewCount = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CommentCount = 0,
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 14, 17, 55, 30, 456, DateTimeKind.Local),
                            Description = "Tượng trưng cho biển cả tri thức sâu rộng và không ngừng mở rộng",
                            IsAIGenerated = false,
                            LikeCount = 0,
                            Privacy = 0,
                            State = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.5gNG99_0Acz4Y8CGOYlg?pid=ImgGn",
                            ThumbnailName = "00000000-0000-0000-0000-000000000010_t.jpg",
                            Title = "Biển cả của tri thức",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AssetTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Asset", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000008"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "File PTS tuyển tập minh hoạ sách tâm lý",
                            Description = "tập tin PTS tuyển tập minh hoạ sách tâm lý sẽ cung cấp một cái nhìn tổng quan và thú vị.",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 10000.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "Robot PTS",
                            Description = "Tặng các bạn",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "Canh cụt ZIP",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 12000.0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.Property<Guid>("BlockingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockingId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("Block", (string)null);

                    b.HasData(
                        new
                        {
                            BlockingId = new Guid("00000000-0000-0000-0000-000000000001"),
                            BlockedId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            BlockingId = new Guid("00000000-0000-0000-0000-000000000001"),
                            BlockedId = new Guid("00000000-0000-0000-0000-000000000003")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtworkId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Bookmark", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentCategory")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategory");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CategoryName = "Minh hoạ"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CategoryName = "Thiết kế đồ họa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CategoryName = "UI/UX"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CategoryName = "Kiến trúc"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CategoryName = "Thời trang"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CategoryName = "Đồ họa chuyển động"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CategoryName = "In ấn"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CategoryName = "Đồ họa 3D"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CategoryName = "Nghệ thuật số"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            CategoryName = "Nhiếp ảnh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            CategoryName = "Thiết kế sản phẩm"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            CategoryName = "Quảng cáo"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("CategoryArtworkDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f")
                        },
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CategoryServiceDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ServiceId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId_1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId_2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId_1");

                    b.HasIndex("AccountId_2");

                    b.ToTable("ChatBox", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccountId_1 = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccountId_2 = new Guid("00000000-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReplyId");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Đây là một bức tranh rất đẹp",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Minh hoạ xuất sắc",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "10 điểm",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Cute and funny",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Like",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Hoàng hôn lấp lánh quá điiii!",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2024, 3, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowingId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("Follow", (string)null);

                    b.HasData(
                        new
                        {
                            FollowingId = new Guid("00000000-0000-0000-0000-000000000003"),
                            FollowedId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            FollowingId = new Guid("00000000-0000-0000-0000-000000000003"),
                            FollowedId = new Guid("00000000-0000-0000-0000-000000000005")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ImageHash")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            ImageName = "00000000-0000-0000-0000-00000000000e_i1.jpg",
                            Location = "https://i.pinimg.com/originals/b5/7e/14/b57e14aa401d41db2072d1b0ccfbde2b.jpg",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            ImageName = "00000000-0000-0000-0000-00000000000e_i2.jpg",
                            Location = "https://i.pinimg.com/originals/04/b7/46/04b7460b2efef9c432dabbcda2507b71.jpg",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            ImageName = "00000000-0000-0000-0000-00000000000e_i3.jpg",
                            Location = "https://i.pinimg.com/originals/d5/5e/e1/d55ee127c8dc1c7f9d94edc0ec596758.jpg",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            ImageName = "00000000-0000-0000-0000-00000000000f_i0.jpg",
                            Location = "https://i.pinimg.com/originals/db/93/a1/db93a131d59201ed997d606ea33c4933.jpg",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            ImageName = "00000000-0000-0000-0000-00000000000f_i1.jpg",
                            Location = "https://i.pinimg.com/originals/b5/d4/7e/b5d47e1cf4555983a8017e59409b4d4a.jpg",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ImageName = "00000000-0000-0000-0000-000000000008_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.yy76iMmgUCmXetlfQxqn?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ImageName = "00000000-0000-0000-0000-000000000001_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.7WfKwqG.VAbgwQ87iaTU?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ImageName = "00000000-0000-0000-0000-000000000002_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.mMOt1xWJJCHsRoPJXtHQ?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ImageName = "00000000-0000-0000-0000-000000000003_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.k0SSs9Qn3tHNvlcMdMrG?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ImageName = "00000000-0000-0000-0000-000000000004_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.Oe0vi0jHSKaHn5DZ267N?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ImageName = "00000000-0000-0000-0000-000000000005_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.LTaVFacabNQc22SAk1r1?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000006"),
                            ImageName = "00000000-0000-0000-0000-000000000006_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.AoM9akz.gT4RMZ9R6DOh?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000007"),
                            ImageName = "00000000-0000-0000-0000-000000000007_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG..gPcXaRan.FdnEjYCvT3?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ImageName = "00000000-0000-0000-0000-000000000009_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.Uz66_wn15hsKPirpv6Pb?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            ImageName = "00000000-0000-0000-0000-00000000000a_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.78MNqZpoa6ReKmvZCHPI?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001b"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            ImageName = "00000000-0000-0000-0000-00000000000b_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.Iar__phrqaC3bhQLIHAZ?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001d"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            ImageName = "00000000-0000-0000-0000-00000000000c_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.MxQxUggA0RKmKdTjwAqw?pid=ImgGn",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000001f"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000010"),
                            ImageName = "00000000-0000-0000-0000-000000000010_i0.jpg",
                            Location = "https://th.bing.com/th/id/OIG.5gNG99_0Acz4Y8CGOYlg?pid=ImgGn",
                            Order = 0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Like", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000a"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000c"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000d"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000e"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            AccountId = new Guid("00000000-0000-0000-0000-00000000000f"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Message", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo bạn"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 6"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 7"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 8"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 9"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hellooooo 10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Hello from the sea."
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("MilestoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId");

                    b.ToTable("Milestone", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotifyType")
                        .HasColumnType("int");

                    b.Property<Guid>("SentToAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SentToAccount");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfConcept")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRevision")
                        .HasColumnType("int");

                    b.Property<Guid>("OrdererId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TargetDelivery")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Proposal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Category = "Website",
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "yeu cau lam website ecommerce",
                            InitialPrice = 20000.0,
                            NumberOfConcept = 2,
                            NumberOfRevision = 3,
                            OrdererId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ProjectTitle = "yeu cau lam website ecommerce",
                            ProposalStatus = 4,
                            ServiceId = new Guid("00000000-0000-0000-0000-000000000001"),
                            TargetDelivery = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Total = 69000.0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposalAssetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalAsset", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReportEntity")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Report", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 27, 15, 40, 28, 901, DateTimeKind.Local),
                            Reason = "this is sexual harrasment",
                            ReportEntity = 2,
                            ReportType = 0,
                            State = 0,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 12, 7, 15, 40, 28, 901, DateTimeKind.Local),
                            Note = "This is impersonation",
                            Reason = "Inappropriate content",
                            ReportEntity = 2,
                            ReportType = 3,
                            State = 1,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 12, 27, 15, 40, 28, 901, DateTimeKind.Local),
                            Note = "This is not abuse of platform",
                            Reason = "Abuse of platform",
                            ReportEntity = 2,
                            ReportType = 0,
                            State = 2,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 12, 28, 15, 40, 28, 901, DateTimeKind.Local),
                            Reason = "Disallowed content",
                            ReportEntity = 2,
                            ReportType = 5,
                            State = 0,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 12, 29, 15, 40, 28, 901, DateTimeKind.Local),
                            Reason = "Disallowed content",
                            ReportEntity = 2,
                            ReportType = 4,
                            State = 0,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 27, 15, 40, 28, 901, DateTimeKind.Local),
                            Reason = "Not suitable",
                            ReportEntity = 2,
                            ReportType = 4,
                            State = 0,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 28, 15, 40, 28, 901, DateTimeKind.Local),
                            Reason = "This is spam",
                            ReportEntity = 2,
                            ReportType = 2,
                            State = 0,
                            TargetId = new Guid("00000000-0000-0000-0000-000000000007")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Timeline")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Budget = 69000.0,
                            ChatBoxId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "yeu cau lam website ecommerce",
                            RequestStatus = 0,
                            ServiceId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Timeline = "2 - 3 tuần"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Vote")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId")
                        .IsUnique();

                    b.ToTable("Review", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Detail = "good",
                            ProposalId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Vote = 5.0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("NumberOfConcept")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRevision")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "2 - 3 tuần",
                            Description = "Mô tả Dịch vụ thiết kế",
                            LastModificatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 2,
                            NumberOfRevision = 2,
                            ServiceName = "Dịch vụ thiết kế",
                            StartingPrice = 100000.0,
                            Thumbnail = "https://3.imimg.com/data3/SQ/DN/MY-16602737/banner-design-services.png"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "4 - 6 tuần",
                            Description = "Mô tả Dịch vụ phát triển website",
                            LastModificatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 3,
                            NumberOfRevision = 3,
                            ServiceName = "Dịch vụ phát triển website",
                            StartingPrice = 150000.0,
                            Thumbnail = "https://laptopdieplinh.com/uploads/7%20c%C3%B4ng%20c%E1%BB%A5%20ph%C3%A1t%20tri%E1%BB%83n%20website%20b%E1%BA%A1n%20c%E1%BA%A7n%20bi%E1%BA%BFt%20-%200.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "1 - 2 tuần",
                            Description = "Mô tả Dịch vụ in ấn",
                            LastModificatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 1,
                            NumberOfRevision = 1,
                            ServiceName = "Dịch vụ in ấn",
                            StartingPrice = 50000.0,
                            Thumbnail = "https://channel.mediacdn.vn/2022/3/17/photo-1-1647512803989607433836.jpg"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "3 - 4 tuần",
                            Description = "Mô tả Dịch vụ quản lý dự án",
                            LastModificatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 2,
                            NumberOfRevision = 2,
                            ServiceName = "Dịch vụ quản lý dự án",
                            StartingPrice = 120000.0,
                            Thumbnail = "https://www.inandaiduong.com/wp-content/uploads/2015/01/dich-vu-thiet-ke-in-an.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ServiceDetail", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            TagName = "Màu sắc"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            TagName = "Trừu tượng"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            TagName = "Phong cảnh"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            TagName = "Thiên nhiên"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            TagName = "Hình học"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            TagName = "Anime"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            TagName = "Chân dung"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            TagName = "Sáng tạo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            TagName = "Kỹ thuật số"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            TagName = "Graffiti"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            TagName = "Dự án cá nhân"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            TagName = "Nghệ thuật số hóa"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            TagName = "Thể thao"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            TagName = "Chủ đề xã hội"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            TagName = "Vintage"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            TagName = "Ảo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            TagName = "Minimalism"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            TagName = "Figma"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            TagName = "Mèo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            TagName = "Động vật hoang dã"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            TagName = "Nền tảng"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            TagName = "Nghệ thuật đương đại"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            TagName = "Chủ đề khoa học"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            TagName = "Giao thông"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("TagDetail", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-000000000005"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-000000000008"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-00000000000b"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000e")
                        },
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-000000000016"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f")
                        },
                        new
                        {
                            TagId = new Guid("00000000-0000-0000-0000-000000000009"),
                            ArtworkId = new Guid("00000000-0000-0000-0000-00000000000f")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId");

                    b.ToTable("TransactionHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AssetId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2024, 1, 13, 22, 30, 3, 678, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"Cánh cụt ZIP\"",
                            Price = 12.0,
                            TransactionStatus = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AssetId = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2024, 1, 15, 9, 59, 59, 0, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"File PTS tuyển tập minh hoạ sách tâm lý\"",
                            Price = 10.0,
                            TransactionStatus = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AssetId = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2024, 1, 14, 22, 30, 3, 678, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"Cánh cụt ZIP\"",
                            Price = 12.0,
                            TransactionStatus = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ATid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("RTid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ATid")
                        .IsUnique();

                    b.HasIndex("RTid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("WithdrawInformation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("WithdrawMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Balance = 200000.0,
                            WithdrawInformation = "0902287461",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Balance = 100000.0,
                            WithdrawInformation = "0939959417",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Balance = 100000.0,
                            WithdrawInformation = "0902287462",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Balance = 100000.0,
                            WithdrawInformation = "0902287463",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            AccountId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Balance = 100000.0,
                            WithdrawInformation = "0902287464",
                            WithdrawMethod = 0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AppTransId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppTransId")
                        .IsUnique()
                        .HasFilter("[AppTransId] IS NOT NULL");

                    b.HasIndex("CreatedBy");

                    b.ToTable("WalletHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Amount = 200.0,
                            AppTransId = "240128_7635981",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 7, 15, 30, 3, 678, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 2500.0,
                            AppTransId = "180623_2054176",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 10, 21, 20, 10, 234, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 2000.0,
                            AppTransId = "210430_6849203",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 11, 14, 2, 59, 59, 0, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 300.0,
                            AppTransId = "190815_3095728",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedOn = new DateTime(2023, 12, 10, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Amount = 200.0,
                            AppTransId = "220506_1478963",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2023, 11, 16, 9, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Amount = 2500.0,
                            AppTransId = "231112_8023456",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2023, 11, 29, 1, 30, 15, 567, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Amount = 1700.0,
                            AppTransId = "200925_6193840",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedOn = new DateTime(2023, 12, 1, 6, 59, 59, 999, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Amount = 200.0,
                            AppTransId = "171212_4357692",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2023, 11, 19, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Amount = 2500.0,
                            AppTransId = "160509_9270134",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2023, 11, 29, 1, 30, 15, 567, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000a"),
                            Amount = 1700.0,
                            AppTransId = "250321_4685027",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000004"),
                            CreatedOn = new DateTime(2023, 12, 10, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000b"),
                            Amount = 200.0,
                            AppTransId = "231205_7890123",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 11, 22, 12, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000c"),
                            Amount = 2500.0,
                            AppTransId = "200703_4567890",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 11, 15, 10, 45, 20, 123, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000d"),
                            Amount = 1700.0,
                            AppTransId = "180924_1234567",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000005"),
                            CreatedOn = new DateTime(2023, 12, 5, 9, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000e"),
                            Amount = 3000.0,
                            AppTransId = "210817_8901234",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2023, 11, 3, 17, 45, 20, 123, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-00000000000f"),
                            Amount = 1500.0,
                            AppTransId = "220129_5678901",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2023, 11, 17, 9, 59, 59, 0, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Amount = 500.0,
                            AppTransId = "160827_3456789",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedOn = new DateTime(2023, 11, 6, 1, 20, 45, 890, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Artworks")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Assets")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Blocked")
                        .WithMany("Blocked")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Blocking")
                        .WithMany("Blocking")
                        .HasForeignKey("BlockingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Collection", "Collection")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account_1")
                        .WithMany("ChatBoxes_1")
                        .HasForeignKey("AccountId_1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account_2")
                        .WithMany("ChatBoxes_2")
                        .HasForeignKey("AccountId_2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account_1");

                    b.Navigation("Account_2");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Collections")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Comments")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Comment", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId");

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Followed")
                        .WithMany("Followings")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Following")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Images")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Likes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Likes")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Messages")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");

                    b.Navigation("ChatBox");
                });

            modelBuilder.Entity("Domain.Entitites.Milestone", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "CreatedAccount")
                        .WithMany("Milestones")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("Milestones")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedAccount");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("SentToAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Proposals")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Proposals")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Proposals")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("ProposalAssets")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "AccountReport")
                        .WithMany("Reports")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("AccountReport");
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Requests")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entitites.Review", "ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Services")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("TagDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Tag", "Tag")
                        .WithMany("TagDetails")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Asset", "Asset")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AssetId");

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Account");

                    b.Navigation("Asset");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entitites.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("WalletHistories")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");

                    b.Navigation("ChatBoxes_1");

                    b.Navigation("ChatBoxes_2");

                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Likes");

                    b.Navigation("Messages");

                    b.Navigation("Milestones");

                    b.Navigation("Notifications");

                    b.Navigation("Proposals");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("TransactionHistories");

                    b.Navigation("UserTokens");

                    b.Navigation("Wallet");

                    b.Navigation("WalletHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Bookmarks");

                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("ServiceDetails");

                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("ProposalAssets");

                    b.Navigation("Review");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Navigation("TagDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
