// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Migrators.MSSQL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240127093757_AddData")]
    partial class AddData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            Avatar = "https://i.pinimg.com/564x/ed/de/aa/eddeaaf250c19489e25bd0a2dd3e7756.jpg",
                            CreatedOn = new DateTime(2023, 10, 14, 12, 37, 42, 345, DateTimeKind.Local),
                            Email = "user@example.com",
                            Fullname = "Người dùng mặc định",
                            Password = "/Yvo/zNSPcJB+6Roi0BD6gR/tx9tPXSqrslB+3Zy0rwOC2lA",
                            Role = 2,
                            Username = "user"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            Avatar = "https://i.pinimg.com/564x/be/85/2f/be852fd4ad1cb76b83ce962f618895bd.jpg",
                            CreatedOn = new DateTime(2023, 10, 15, 17, 15, 47, 890, DateTimeKind.Local),
                            Email = "lamlam@example.com",
                            Fullname = "Trúc Lam Võ",
                            Password = "P9i8PUWQ4DnT6Dnstg7HEXTlnFUDoZFTNJopEJ4UxxoK3zRn",
                            Role = 2,
                            Username = "lamlam"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            Avatar = "https://i.pinimg.com/564x/14/b0/3b/14b03bdcab41f458dd15c9f5669cef2d.jpg",
                            CreatedOn = new DateTime(2023, 10, 21, 19, 20, 47, 890, DateTimeKind.Local),
                            Email = "hoanganh@example.com",
                            Fullname = "Đặng Hoàng Anh",
                            Password = "RZX95v+qA/O+EKXLkilrMbLW+cKQ7jekrOE9uwWE4fSupbQM",
                            Role = 2,
                            Username = "hoanganh"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            Avatar = "https://i.pinimg.com/564x/6c/a3/4b/6ca34beddfbd279418c915d2258d698b.jpg",
                            CreatedOn = new DateTime(2023, 10, 27, 19, 23, 47, 890, DateTimeKind.Local),
                            Email = "thong@example.com",
                            Fullname = "Nguyễn Trung Thông",
                            Password = "BCpA8roVqTkU54PKIBXU4Iyl3YqyF5wYPagAXZ/1HYFEB9dh",
                            Role = 2,
                            Username = "thong"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            Avatar = "https://i.pinimg.com/736x/81/3c/57/813c57fcb969d58fac1672594da05532.jpg",
                            CreatedOn = new DateTime(2023, 10, 30, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "phu@example.com",
                            Fullname = "Huỳnh Vạn Phú",
                            Password = "44p9oaVq2ED8i7Q6vKIaS//ynDYqhnLcHcX/W7sDDIa1m3v/",
                            Role = 2,
                            Username = "phuhuynh"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-e5f6-08dc1445b3e2"),
                            Avatar = "https://i.pinimg.com/564x/7d/cd/61/7dcd61988b0add83b5ba9a656512593e.jpg",
                            CreatedOn = new DateTime(2023, 10, 14, 12, 37, 42, 345, DateTimeKind.Local),
                            Email = "mod@example.com",
                            Fullname = "Kiểm soát viên",
                            Password = "/yI89eEokmyCtc8FQcA8Salpuc2Gnv6+xvWUi9jfF3D56K8l",
                            Role = 1,
                            Username = "mod"
                        },
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-5141-08dc1445b3e3"),
                            Avatar = "https://i.pinimg.com/564x/0e/4b/7a/0e4b7aef4834bfc646775d8fd3705825.jpg",
                            CreatedOn = new DateTime(2023, 10, 2, 10, 21, 47, 890, DateTimeKind.Local),
                            Email = "admin@example.com",
                            Fullname = "Quản trị viên hệ thống",
                            Password = "tmb/sYLga1PDxUtRiIEU4YJtaG2HN58av/VA2S/8v19GLbSx",
                            Role = 0,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Artwork", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            CommentCount = 2,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 27, 15, 40, 28, 901, DateTimeKind.Local),
                            Description = "Bộ sưu tập người máy - biểu tượng của tương lai.",
                            LikeCount = 2,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.D7FfBXsOQCjc28w68xZS?pid=ImgGn",
                            ThumbnailName = "35966d1a-9b08-4743-b1c3-474a58350f6e_t.jpg",
                            Title = "Kỷ nguyên mới",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 11, 6, 1, 20, 45, 890, DateTimeKind.Local),
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.MC3PObbEmuJhfsPJ8biQ?pid=ImgGn",
                            ThumbnailName = "72fbdead-0704-4f69-82ec-0cd09218fef9_t.jpg",
                            Title = "Touhou Project Image Cute",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("35966d1a-9b08-4743-b1c3-474a58350f5e"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 20, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Đây là tuyển tập tâm huyết của mình, nhớ like và comment để ủng hộ mình nha",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.yy76iMmgUCmXetlfQxqn?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "35966d1a-9b08-4743-b1c3-474a58350f5e_t.jpg",
                            Title = "Tuyển tập minh hoạ sách tâm lý",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("ab5e5cda-2b09-4ba1-8d6c-74f169c8a9a3"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 5, 9, 37, 42, 345, DateTimeKind.Local),
                            Description = "Tuyển tập những bức vẽ về hoàng hôn",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.7WfKwqG.VAbgwQ87iaTU?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "ab5e5cda-2b09-4ba1-8d6c-74f169c8a9a3_t.jpg",
                            Title = "Hoàng hôn rực nắng",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("e74b9b62-1f9e-4a12-97e1-8c79c9a2aeb7"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 20, 22, 20, 45, 890, DateTimeKind.Local),
                            Description = "Khám phá sâu hơn về cảm xúc và tâm trạng trong cuộc sống",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.mMOt1xWJJCHsRoPJXtHQ?pid=ImgGn",
                            ThumbnailName = "e74b9b62-1f9e-4a12-97e1-8c79c9a2aeb7_t.jpg",
                            Title = "Hành trình sâu cảm xúc",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("3f22b8d1-0d5b-4da0-9f4e-876c1586c5b3"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 18, 20, 55, 30, 456, DateTimeKind.Local),
                            Description = "Minh họa những cuộc chiến tiêu biểu của thời đại",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.k0SSs9Qn3tHNvlcMdMrG?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "3f22b8d1-0d5b-4da0-9f4e-876c1586c5b3_t.jpg",
                            Title = "Vẻ đẹp của lịch sử",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("56f86f82-4622-4710-8d1c-b8c1664711a2"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 22, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Tác phẩm thể hiện sự ảnh hưởng của quá khứ đối với hiện tại",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Oe0vi0jHSKaHn5DZ267N?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "56f86f82-4622-4710-8d1c-b8c1664711a2_t.jpg",
                            Title = "Dấu vết của quá khứ",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("8c24a1d8-9f14-44cd-9e86-2c542d14413c"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 20, 7, 30, 15, 567, DateTimeKind.Local),
                            Description = "Minh họa cho hành trình không ngừng của sự sáng tạo",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.LTaVFacabNQc22SAk1r1?pid=ImgGn",
                            ThumbnailName = "8c24a1d8-9f14-44cd-9e86-2c542d14413c_t.jpg",
                            Title = "Hành trình của sự sáng tạo",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("5fdaf3c7-6c68-45fb-9610-b67b8a1d0bd0"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 26, 12, 40, 28, 901, DateTimeKind.Local),
                            Description = "Tượng trưng cho sự đồng hành và hỗ trợ của đối tác tâm lý",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.AoM9akz.gT4RMZ9R6DOh?pid=ImgGn",
                            ThumbnailName = "5fdaf3c7-6c68-45fb-9610-b67b8a1d0bd0_t.jpg",
                            Title = "Sự đồng hành của đối tác tâm lý",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("fb7c52b9-64f8-4e84-a992-14b8bcb6ea35"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 30, 1, 30, 15, 567, DateTimeKind.Local),
                            Description = "Hình ảnh tượng trưng cho ánh sáng và năng lượng bên trong chúng ta",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG..gPcXaRan.FdnEjYCvT3?pid=ImgGn",
                            ThumbnailName = "fb7c52b9-64f8-4e84-a992-14b8bcb6ea35_t.jpg",
                            Title = "Mặt trời bên trong",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("91f9a14d-66a9-43da-8e43-2579baf7c8a7"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 2, 4, 20, 10, 234, DateTimeKind.Local),
                            Description = "Minh họa cho tâm trạng lạc quan và hy vọng về tương lai",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Uz66_wn15hsKPirpv6Pb?pid=ImgGn",
                            ThumbnailName = "91f9a14d-66a9-43da-8e43-2579baf7c8a7_t.jpg",
                            Title = "Sự lạc quan của tương lai",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("b1c16326-7a16-4f6b-a76d-cf15ce2c71d3"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 8, 20, 55, 30, 456, DateTimeKind.Local),
                            Description = "Tượng trưng cho nơi gặp gỡ và kết nối tâm hồn con người",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.78MNqZpoa6ReKmvZCHPI?pid=ImgGn",
                            ThumbnailName = "b1c16326-7a16-4f6b-a76d-cf15ce2c71d3_t.jpg",
                            Title = "Nơi gặp gỡ tâm hồn",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("9202bb7f-71f3-4641-b1d4-9bc858416d84"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 10, 15, 30, 3, 678, DateTimeKind.Local),
                            Description = "Tượng trưng cho vũ trụ rộng lớn và không gian của tâm trí con người",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.Iar__phrqaC3bhQLIHAZ?w=1024&h=1024&rs=1&pid=ImgDetMain",
                            ThumbnailName = "9202bb7f-71f3-4641-b1d4-9bc858416d84_t.jpg",
                            Title = "Vũ trụ tâm trí",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("7a04e5c7-ffea-45da-80d2-875b0a0b8d35"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 11, 9, 37, 42, 345, DateTimeKind.Local),
                            Description = "Bức tranh thể hiện hành trình tìm kiếm và theo đuổi đam mê trong cuộc sống",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.MxQxUggA0RKmKdTjwAqw?pid=ImgGn",
                            ThumbnailName = "7a04e5c7-ffea-45da-80d2-875b0a0b8d35_t.jpg",
                            Title = "Hành trình tìm kiếm đam mê",
                            ViewCount = 99
                        },
                        new
                        {
                            Id = new Guid("f7e4df8d-b4b7-4a39-8f2b-74f5d4b512a4"),
                            CommentCount = 0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 12, 17, 55, 30, 456, DateTimeKind.Local),
                            Description = "Tượng trưng cho biển cả tri thức sâu rộng và không ngừng mở rộng",
                            LikeCount = 0,
                            Privacy = 0,
                            Thumbnail = "https://th.bing.com/th/id/OIG.5gNG99_0Acz4Y8CGOYlg?pid=ImgGn",
                            ThumbnailName = "f7e4df8d-b4b7-4a39-8f2b-74f5d4b512a4_t.jpg",
                            Title = "Biển cả của tri thức",
                            ViewCount = 99
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AssetTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Asset", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec114537-eadb-49d4-ad49-675d06ce6ccc"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "File PTS tuyển tập minh hoạ sách tâm lý",
                            Description = "Mua đê",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 10.0
                        },
                        new
                        {
                            Id = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "Touhout PTS",
                            Description = "Tặng các bạn",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("8225058f-9f38-49f2-a68d-d9237b0a550f"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            AssetName = "PTS_1.zip",
                            AssetTitle = "Tàu hũ ZIP",
                            Location = "https://github.com/saadeghi/daisyui/archive/refs/tags/v4.5.0.zip",
                            Price = 12.0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.Property<Guid>("BlockingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockingId", "BlockedId");

                    b.HasIndex("BlockedId");

                    b.ToTable("Block", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtworkId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("Bookmark", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentCategory")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategory");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("57dbdb36-f9ad-4926-9fb6-2df15969ed5e"),
                            CategoryName = "Minh hoạ"
                        },
                        new
                        {
                            Id = new Guid("8b0f2e91-9a3c-4d6e-b8e7-23c5a41a2f0a"),
                            CategoryName = "Thiết kế đồ họa"
                        },
                        new
                        {
                            Id = new Guid("c51283f7-6d58-4a70-9bf2-13d3b5bc8456"),
                            CategoryName = "UI/UX"
                        },
                        new
                        {
                            Id = new Guid("a6d7e9b2-85af-4f01-bd97-2c3bbd3a7e09"),
                            CategoryName = "Kiến trúc"
                        },
                        new
                        {
                            Id = new Guid("f4e81ac1-1a6e-47c3-92fc-7a54ae95d689"),
                            CategoryName = "Thời trang"
                        },
                        new
                        {
                            Id = new Guid("6dfe4e90-98e1-43e5-b2c1-ef7fd9e6fb67"),
                            CategoryName = "Đồ họa chuyển động"
                        },
                        new
                        {
                            Id = new Guid("1b7a9c43-d8d3-4a64-9c4b-c5823e22a3f3"),
                            CategoryName = "In ấn"
                        },
                        new
                        {
                            Id = new Guid("490f5bd6-1a32-4e9b-9236-5794c97526e1"),
                            CategoryName = "Đồ họa 3D"
                        },
                        new
                        {
                            Id = new Guid("ced1a254-ecac-47e4-ae18-5d23c2711bf5"),
                            CategoryName = "Nghệ thuật số"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec5"),
                            CategoryName = "Nhiếp ảnh"
                        },
                        new
                        {
                            Id = new Guid("e839e134-9158-4d2d-a04f-503fdd2d275e"),
                            CategoryName = "Thiết kế sản phẩm"
                        },
                        new
                        {
                            Id = new Guid("e839e134-9158-4d2d-a04f-503fdd2d2751"),
                            CategoryName = "Quảng cáo"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("CategoryArtworkDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("57dbdb36-f9ad-4926-9fb6-2df15969ed5e"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            CategoryId = new Guid("8b0f2e91-9a3c-4d6e-b8e7-23c5a41a2f0a"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            CategoryId = new Guid("1b7a9c43-d8d3-4a64-9c4b-c5823e22a3f3"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            CategoryId = new Guid("57dbdb36-f9ad-4926-9fb6-2df15969ed5e"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9")
                        },
                        new
                        {
                            CategoryId = new Guid("ced1a254-ecac-47e4-ae18-5d23c2711bf5"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CategoryServiceDetail", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("8b0f2e91-9a3c-4d6e-b8e7-23c5a41a2f0a"),
                            ServiceId = new Guid("1c8542d4-41bd-492b-9d21-905c6a8b0532")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId_1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId_2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId_1");

                    b.HasIndex("AccountId_2");

                    b.ToTable("ChatBox", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5bd4c5d0-bee0-4b9c-9396-9cb914a1294c"),
                            AccountId_1 = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            AccountId_2 = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2")
                        },
                        new
                        {
                            Id = new Guid("5bd4c5d0-bee0-4b9c-9396-9cb914a1295c"),
                            AccountId_1 = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            AccountId_2 = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1")
                        },
                        new
                        {
                            Id = new Guid("5bd4c5d0-bee0-4b9c-9396-9cb914a1296c"),
                            AccountId_1 = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            AccountId_2 = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReplyId");

                    b.ToTable("Comment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ea03178-3cc7-40e5-9344-a6a96c492a42"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            Content = "Đây là một bức tranh rất đẹp",
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("74524095-a079-44b0-9e2a-a8e67ae6b06e"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            Content = "Minh hoạ xuất sắc",
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("457f3324-5594-4526-ab24-25c63e5ee7bd"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            Content = "10 điểm",
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e05281fb-cfb2-4dc3-9be8-d8ae59016f9a"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            Content = "Cute and funny",
                            CreatedBy = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5075efb6-cd23-4cea-8882-2f5669c70ea7"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            Content = "Like",
                            CreatedBy = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Image", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01aa2232-7628-4227-b034-1c1a32cad359"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            ImageName = "35966d1a-9b08-4743-b1c3-474a58350f6e_i1.jpg",
                            Location = "https://www.dtv-ebook.com/images/files_2/2023/022023/tam-ly-hoc-toi-pham-phac-hoa-chan-dung-ke-pham-toi-diep-hong-vu.jpg",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("ae8fb7be-5c63-481e-b997-2ada5ac5392b"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            ImageName = "35966d1a-9b08-4743-b1c3-474a58350f6e_i2.jpg",
                            Location = "https://lh3.googleusercontent.com/QKQqZt0RivsBmyjwFI8EomO6YZ2-hnSsiwLdKG9btAiNhVjiwpKtzTiULFqTRCo5JUOe5t8f6Be_sZ9ZBYRD7v3EYwqzlkomHabN_LqntP61rVbqqk9wuQqgVY4Dmk7JseAHmjbNWRacbMJynaBXgCoYvcQzAuYPOgNj-P2CAEWroKZcieC2GDyal2x02Cw0izhqYNCnJAQLnEPSErSXgYNBoSb3KlmjHcev9zq2KXRaorp04_aKLN5-iewZ27ee9OWmSuwfvnGgjSK98rKdtGfnqw5U_1cp1R89brso1E8VCIhFGfRTKijJMdCtjE3VbpyO_3vI46D5UVbJZB3N-c0-DulKgbP1EFp5p_wbgBwL2AQVAgQCB2TJ1IS_hVKqVS1GZ3xsCleYb7xTkaqqcojQIbR1GYMxirT_u2jU6xHq6ycB2w6UPCo_DZJfVhieyZXzjpIa92pN-6UM4I-Ou54BnFpvANrOxfOWxblViYR43PrSdHgu5XGGQYg2SYKvuAqbzkpOLpcnyRQBxDPV6bCMURXDTvnmRQj1Rl_14MEW278wjOe-D39mATYeEO6Xfq445Wu9SUEcXd40soLtSNcun92XJ-j_0Dyr1Dd2argkutkMXgiqRHyZxN1hfadB_T1xQ3Ln9TA8oSRrYEmoUIXi4iS9XD08kj5FZf-slMLA_KQeYT7F2Alkx11IBq2aahNUlf1FTWykZVpyxAr0DNjCypS44Lbmqsdw7xfQzKT8WrLR=w400-h500-no",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("ff16271c-c04a-4cec-b6f1-04b555659b5a"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e"),
                            ImageName = "35966d1a-9b08-4743-b1c3-474a58350f6e_i3.jpg",
                            Location = "https://vietbooks.info/attachments/upload_2023-2-3_11-29-1-png.19599/",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("36208d9b-471a-4a88-be28-adabfd1f2ae5"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            ImageName = "72fbdead-0704-4f69-82ec-0cd09218fef9_i0.jpg",
                            Location = "https://i.pximg.net/img-original/img/2023/11/13/18/56/54/113380427_p0.png",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("5d96552b-ff92-4064-8858-5e1e96ee9899"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            ImageName = "72fbdead-0704-4f69-82ec-0cd09218fef9_i1.jpg",
                            Location = "https://i.pximg.net/img-original/img/2023/11/13/18/56/54/113380427_p1.png",
                            Order = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FileLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NotifyType")
                        .HasColumnType("int");

                    b.Property<Guid>("SentToAccount")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SentToAccount");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProposalStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Proposal", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("AssetLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalAsset", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportEntity")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReportedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("ChatBoxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Timeline")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBoxId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d580000-c214-88a4-2ef8-08dc1ef3c2fb"),
                            ChatBoxId = new Guid("5bd4c5d0-bee0-4b9c-9396-9cb914a1294c"),
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Message = "yeu cau lam website ecommerce",
                            RequestStatus = 0,
                            ServiceId = new Guid("1c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            Timeline = "2 - 3 tuần"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Vote")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId")
                        .IsUnique();

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("LastModificatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModificatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("NumberOfConcept")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRevision")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("StartingPrice")
                        .HasColumnType("float");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "2 - 3 tuần",
                            Description = "Mô tả Dịch vụ thiết kế",
                            LastModificatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 2,
                            NumberOfRevision = 2,
                            ServiceName = "Dịch vụ thiết kế",
                            StartingPrice = 100000.0,
                            Thumbnail = "https://3.imimg.com/data3/SQ/DN/MY-16602737/banner-design-services.png"
                        },
                        new
                        {
                            Id = new Guid("2c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "4 - 6 tuần",
                            Description = "Mô tả Dịch vụ phát triển website",
                            LastModificatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 3,
                            NumberOfRevision = 3,
                            ServiceName = "Dịch vụ phát triển website",
                            StartingPrice = 150000.0,
                            Thumbnail = "https://laptopdieplinh.com/uploads/7%20c%C3%B4ng%20c%E1%BB%A5%20ph%C3%A1t%20tri%E1%BB%83n%20website%20b%E1%BA%A1n%20c%E1%BA%A7n%20bi%E1%BA%BFt%20-%200.jpg"
                        },
                        new
                        {
                            Id = new Guid("3c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "1 - 2 tuần",
                            Description = "Mô tả Dịch vụ in ấn",
                            LastModificatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 1,
                            NumberOfRevision = 1,
                            ServiceName = "Dịch vụ in ấn",
                            StartingPrice = 50000.0,
                            Thumbnail = "https://channel.mediacdn.vn/2022/3/17/photo-1-1647512803989607433836.jpg"
                        },
                        new
                        {
                            Id = new Guid("4c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeliveryTime = "3 - 4 tuần",
                            Description = "Mô tả Dịch vụ quản lý dự án",
                            LastModificatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfConcept = 2,
                            NumberOfRevision = 2,
                            ServiceName = "Dịch vụ quản lý dự án",
                            StartingPrice = 120000.0,
                            Thumbnail = "https://www.inandaiduong.com/wp-content/uploads/2015/01/dich-vu-thiet-ke-in-an.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ServiceDetail", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("1c8542d4-41bd-492b-9d21-905c6a8b0532"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("TagName")
                        .IsUnique();

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec1"),
                            TagName = "Màu sắc"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec2"),
                            TagName = "Trừu tượng"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec3"),
                            TagName = "Phong cảnh"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec4"),
                            TagName = "Thiên nhiên"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec5"),
                            TagName = "Hình học"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec6"),
                            TagName = "Anime"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec7"),
                            TagName = "Chân dung"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec8"),
                            TagName = "Sáng tạo"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec9"),
                            TagName = "Kỹ thuật số"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95eca"),
                            TagName = "Graffiti"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ecb"),
                            TagName = "Dự án cá nhân"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ecc"),
                            TagName = "Nghệ thuật số hóa"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ecd"),
                            TagName = "Thể thao"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ece"),
                            TagName = "Chủ đề xã hội"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ecf"),
                            TagName = "Vintage"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed0"),
                            TagName = "Ảo"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed1"),
                            TagName = "Minimalism"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed2"),
                            TagName = "Figma"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed3"),
                            TagName = "Mèo"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed4"),
                            TagName = "Động vật hoang dã"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed5"),
                            TagName = "Nền tảng"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed6"),
                            TagName = "Nghệ thuật đương đại"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed7"),
                            TagName = "Chủ đề khoa học"
                        },
                        new
                        {
                            Id = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed8"),
                            TagName = "Giao thông"
                        });
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "ArtworkId");

                    b.HasIndex("ArtworkId");

                    b.ToTable("TagDetail", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec2"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec5"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec8"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ecb"),
                            ArtworkId = new Guid("35966d1a-9b08-4743-b1c3-474a58350f6e")
                        },
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ed6"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9")
                        },
                        new
                        {
                            TagId = new Guid("7cfdb5fc-7fe7-48e9-a1a2-78b788f95ec9"),
                            ArtworkId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ProposalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProposalId");

                    b.ToTable("TransactionHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5951c1f-b46f-4af1-9c9a-f95dc6e9f9d1"),
                            AssetId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            CreatedBy = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            CreatedOn = new DateTime(2024, 1, 13, 22, 30, 3, 678, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"Tàu hũ ZIP\"",
                            Price = 12.0,
                            TransactionStatus = 1
                        },
                        new
                        {
                            Id = new Guid("d5951c1f-b46f-4af1-9c9a-f95dc6e9f9d2"),
                            AssetId = new Guid("ec114537-eadb-49d4-ad49-675d06ce6ccc"),
                            CreatedBy = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            CreatedOn = new DateTime(2024, 1, 15, 9, 59, 59, 0, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"File PTS tuyển tập minh hoạ sách tâm lý\"",
                            Price = 10.0,
                            TransactionStatus = 1
                        },
                        new
                        {
                            Id = new Guid("d5951c1f-b46f-4af1-9c9a-f95dc6e9f9d3"),
                            AssetId = new Guid("72fbdead-0704-4f69-82ec-0cd09218fef9"),
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2024, 1, 14, 22, 30, 3, 678, DateTimeKind.Local),
                            Detail = "Mở khóa tài nguyên \"Tàu hũ ZIP\"",
                            Price = 12.0,
                            TransactionStatus = 1
                        });
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ATid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("RTid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ATid")
                        .IsUnique();

                    b.HasIndex("RTid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("WithdrawInformation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("WithdrawMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c0"),
                            AccountId = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            Balance = 2000.0,
                            WithdrawInformation = "0902287461",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c1"),
                            AccountId = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            Balance = 1000.0,
                            WithdrawInformation = "0939959417",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c2"),
                            AccountId = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            Balance = 1000.0,
                            WithdrawInformation = "0902287462",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c3"),
                            AccountId = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            Balance = 1000.0,
                            WithdrawInformation = "0902287463",
                            WithdrawMethod = 0
                        },
                        new
                        {
                            Id = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c4"),
                            AccountId = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            Balance = 1000.0,
                            WithdrawInformation = "0902287464",
                            WithdrawMethod = 0
                        });
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0290"),
                            Amount = 200.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 7, 15, 30, 3, 678, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c1")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0291"),
                            Amount = 2500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 10, 21, 20, 10, 234, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c1")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0292"),
                            Amount = 2000.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 14, 2, 59, 59, 0, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c1")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0293"),
                            Amount = 300.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-3886-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 10, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c1")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0294"),
                            Amount = 200.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 16, 9, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c2")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0295"),
                            Amount = 2500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 11, 29, 1, 30, 15, 567, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c2")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0296"),
                            Amount = 1700.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-a3f1-08dc1445b3e1"),
                            CreatedOn = new DateTime(2023, 12, 1, 6, 59, 59, 999, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c2")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0297"),
                            Amount = 200.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 11, 19, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c3")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0298"),
                            Amount = 2500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 11, 29, 1, 30, 15, 567, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c3")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf0299"),
                            Amount = 1700.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-0f12-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 12, 10, 12, 40, 28, 901, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c3")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029a"),
                            Amount = 200.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 11, 22, 12, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c4")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029b"),
                            Amount = 2500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 11, 15, 10, 45, 20, 123, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c4")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029c"),
                            Amount = 1700.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-7ad3-08dc1445b3e2"),
                            CreatedOn = new DateTime(2023, 12, 5, 9, 37, 42, 345, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c4")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029d"),
                            Amount = 3000.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            CreatedOn = new DateTime(2023, 11, 3, 17, 45, 20, 123, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c0")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029e"),
                            Amount = 1500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            CreatedOn = new DateTime(2023, 11, 17, 9, 59, 59, 0, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 0,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c0")
                        },
                        new
                        {
                            Id = new Guid("7b7d2223-c1fe-4a45-ad69-8e893ebf029f"),
                            Amount = 500.0,
                            CreatedBy = new Guid("7d580000-c214-88a4-cc1d-08dc1445b3e0"),
                            CreatedOn = new DateTime(2023, 11, 6, 1, 20, 45, 890, DateTimeKind.Local),
                            PaymentMethod = 0,
                            TransactionStatus = 1,
                            Type = 1,
                            WalletId = new Guid("73b5f912-28d7-4473-9c8d-56a734d8a1c0")
                        });
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Artworks")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Assets")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Block", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Blocked")
                        .WithMany("Blocked")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Blocking")
                        .WithMany("Blocking")
                        .HasForeignKey("BlockingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");
                });

            modelBuilder.Entity("Domain.Entitites.Bookmark", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Collection", "Collection")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategory");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryArtworkDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryArtworkDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entitites.CategoryServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Category", "Category")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("CategoryServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account_1")
                        .WithMany("ChatBoxes_1")
                        .HasForeignKey("AccountId_1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account_2")
                        .WithMany("ChatBoxes_2")
                        .HasForeignKey("AccountId_2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account_1");

                    b.Navigation("Account_2");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Collections")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Comments")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Comment", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyId");

                    b.Navigation("Account");

                    b.Navigation("Artwork");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Domain.Entitites.Follow", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Followings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Domain.Entitites.Image", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Images")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Like", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Likes")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("Likes")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("Domain.Entitites.Message", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Messages")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Messages")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");

                    b.Navigation("ChatBox");
                });

            modelBuilder.Entity("Domain.Entitites.Notification", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("SentToAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Proposals")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Proposals")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Proposals")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.ProposalAsset", b =>
                {
                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("ProposalAssets")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Report", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "AccountReport")
                        .WithMany("Reports")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("AccountReport");
                });

            modelBuilder.Entity("Domain.Entitites.Request", b =>
                {
                    b.HasOne("Domain.Entitites.ChatBox", "ChatBox")
                        .WithMany("Requests")
                        .HasForeignKey("ChatBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Requests")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChatBox");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.Review", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Reviews")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entitites.Review", "ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("Services")
                        .HasForeignKey("CreatedBy");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.ServiceDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Service", "Service")
                        .WithMany("ServiceDetails")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entitites.TagDetail", b =>
                {
                    b.HasOne("Domain.Entitites.Artwork", "Artwork")
                        .WithMany("TagDetails")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Tag", "Tag")
                        .WithMany("TagDetails")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entitites.TransactionHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Asset", "Asset")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("AssetId");

                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Domain.Entitites.Proposal", "Proposal")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("ProposalId");

                    b.Navigation("Account");

                    b.Navigation("Asset");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("Domain.Entitites.UserToken", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.HasOne("Domain.Entitites.Account", "Account")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entitites.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entitites.WalletHistory", b =>
                {
                    b.HasOne("Domain.Entitites.Wallet", "Wallet")
                        .WithMany("WalletHistories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entitites.Account", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Blocked");

                    b.Navigation("Blocking");

                    b.Navigation("ChatBoxes_1");

                    b.Navigation("ChatBoxes_2");

                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Likes");

                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Proposals");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("TransactionHistories");

                    b.Navigation("UserTokens");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entitites.Artwork", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Bookmarks");

                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("ServiceDetails");

                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Asset", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Category", b =>
                {
                    b.Navigation("CategoryArtworkDetails");

                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Entitites.ChatBox", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Entitites.Collection", b =>
                {
                    b.Navigation("Bookmarks");
                });

            modelBuilder.Entity("Domain.Entitites.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Entitites.Proposal", b =>
                {
                    b.Navigation("ProposalAssets");

                    b.Navigation("Review");

                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("Domain.Entitites.Service", b =>
                {
                    b.Navigation("CategoryServiceDetails");

                    b.Navigation("Proposals");

                    b.Navigation("Requests");

                    b.Navigation("ServiceDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Tag", b =>
                {
                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Domain.Entitites.Wallet", b =>
                {
                    b.Navigation("WalletHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
